/***
* Name: westworldBDI
* Author: pmath
* Description: 
* Tags: Tag1, Tag2, TagN
***/

model westworldBDI

/* Insert your model definition here */


global{
	geometry shape <- square(100);
	graph<geometry,geometry> roads <- spatial_graph([]);
	list<point> nodes <- [];
	list<point> home_nodes <- [{0,20},{0,80},{20,0},{80,0},{100,20},{100,80},{20,100},{80,100}];
	list<point> stage_location <- [{36,36},{64,36},{36,64},{64,64}];
	file background_file <- file("../includes/background.jpg");
	file roadTexture <- file("../includes/roadTexture.jpg");
	point infocenter_loc <- {10,10};
	point foodStall_loc <- {10,90};
	point refreshment_loc <- {90,10};
	point washroom_loc <- {90,90};
	point concert_loc <- {50,50};
	point lovers_point <- {10,50};
	point food_truck_base <- {25,10};
	point bar_loc <- {50,90};
	float netCost;
	float netProfit<-0.0;
	int greed_th<-10;
	int love_th<-0;
	int jealousy_th<-0;
	int gluttony_th <-10;
	int nb_guest<-3;
	
	// Predicates that define user basic behavior
	predicate goto_concert <- new_predicate('goto Concert');
	predicate enjoy_concert <- new_predicate('enjoy concert');
	predicate get_food <- new_predicate('get food');
	predicate need_washroom <- new_predicate('need a washroom') ;
	predicate thirst <- new_predicate('need refreshment') ;
	predicate get_information <- new_predicate('get information') ;
	predicate go_home <- new_predicate('go home');
	predicate enjoy_concert_together <- new_predicate(' enjoy_concert_together ');
	predicate heartbreak <- new_predicate('heartbreak');
	predicate drink <- new_predicate('drink');
	predicate ask_help <- new_predicate('ask_help');
	predicate pass_out <- new_predicate('pass_out');
	
	
	init{
		
		// Entry points

		loop p over:home_nodes{
			add p to:nodes;
		}
		
		// Extermities
		add point(20,20) to:nodes; //8
		add point(80,20) to:nodes; //9
		add point(20,80) to:nodes; //10
		add point(80,80) to:nodes; //11
		
		//concert hall
		add point(30,30) to:nodes; //12
		add point(30,70) to:nodes; //13
		add point(70,30) to:nodes; //14
		add point(70,70) to:nodes; //15
		
		int k <- length(nodes);

		loop node over:nodes{
			roads<- roads add_node(node);
		}
		
		roads <- roads add_edge(nodes at 0 :: nodes at 8);
		roads <- roads add_edge(nodes at 1 :: nodes at 10);		
        roads <- roads add_edge(nodes at 2 :: nodes at 8);
    	roads <- roads add_edge(nodes at 6 :: nodes at 10);
    	roads <- roads add_edge(nodes at 3 :: nodes at 9);
    	roads <- roads add_edge(nodes at 4 :: nodes at 9);
    	roads <- roads add_edge(nodes at 5 :: nodes at 11);
    	roads <- roads add_edge(nodes at 7 :: nodes at 11);
    	
    	roads <- roads add_edge(nodes at 8 :: nodes at 10);
    	roads <- roads add_edge(nodes at 8 :: nodes at 9);
    	roads <- roads add_edge(nodes at 10 :: nodes at 11);
    	roads <- roads add_edge(nodes at 9 :: nodes at 11);
    	
    	roads <- roads add_edge(nodes at 12 :: nodes at 13);
    	roads <- roads add_edge(nodes at 13 :: nodes at 15);
    	roads <- roads add_edge(nodes at 12 :: nodes at 14);
    	roads <- roads add_edge(nodes at 14 :: nodes at 15);
    	
    	roads <- roads add_edge(nodes at 8 :: nodes at 12);
    	roads <- roads add_edge(nodes at 9 :: nodes at 14);
    	roads <- roads add_edge(nodes at 10 :: nodes at 13);
    	roads <- roads add_edge(nodes at 11 :: nodes at 15);
    	
   		roads <- roads with_weights (roads.edges as_map (each::30));
 
   			
   		create bar{
   			location <- bar_loc;
   		}	   		

		create food_court{
			revenue <- 0.0;
			meal_cost <- 5.0;
			storage <- 60.0;
			location <- foodStall_loc;
		}
		create bathroom{
			location <- washroom_loc;
		}
		create refreshments{
			bottle_cost <- 10.0;
			location <- refreshment_loc;
		}
		create disco{
			location <- lovers_point;
		}
		//create road from:nodes;
		create walker number:nb_guest{
			point initial <- home_nodes at rnd(length(home_nodes)-1);
			location <- initial;
			target<-{50,50};
			is_happy <- true;
			hunger_meter   <- 0.1 + float(rnd(1));
			thirst_meter   <- 0.1 + float(rnd(1));
			bathroom_meter <- 0.1 + float(rnd(0.5));
			money<-1000+rnd(1000.0);
			home <- initial;
		
		}
		create food_truck{
			quantity <- 5000.0;
			location <- {infocenter_loc.x+15,infocenter_loc.y};
		}
		create casino{
			location <- {90,50};
		}
		
		create information_center{
			location <- infocenter_loc;
			foodStall <- foodStall_loc;
			washroom <- washroom_loc;
			refreshment <- refreshment_loc;
			revenue<-0.0;
			cost<-0.0;
			foodCourt <- food_court at_distance 100;
			refreshmentStall <- refreshments at_distance 100;
			casinos <- casino at_distance 100;
			
		}

		create concert_hall {
			location <- stage_location at 0;
		}
		create concert_hall {
			location <- stage_location at 1;
		}	
		create concert_hall{
			location <- stage_location at 2;
		}	
		create concert_hall{
			location <- stage_location at 3;
		}		

   		}
	
}

species information_center skills:[fipa]{
	int oldMess <- 0;
	point foodStall;
	point refreshment;
	point washroom;
	float revenue;
	float cost;
	bool sim_start <-false;
	bool sendFood;
	list<food_court> foodCourt;
    list<refreshments> refreshmentStall;
    list<casino> casinos;
	list<bar> bars;
	list<walker> helpList <- [];
	
	reflex attend_to_guest{
		list<walker> guests <- walker at_distance 0;
		if(!empty(guests)){
			walker i <- guests at 0;
			ask i{
				write '---------------------------------------------------------------------------';
				write 'Serving guest '+i;
				self.knownFoodStall <- myself.foodStall;
				self.knownRefreshment <- myself.refreshment;
				self.knownWashroom <- myself.washroom; 
				if(i.hunger_meter<=0){
					write 'for food please go to '+myself.foodStall;
					i.target<-myself.foodStall;
				}else if(i.thirst_meter <=0){
					write 'for refreshments please go to '+myself.refreshment;
					i.target <-myself.refreshment;
				}else if(i.bathroom_meter >=1){
					i.target <-myself.washroom;
					write 'for the washroom,please go to '+myself.washroom;
				}
			write '---------------------------------------------------------------------------';
			}
		}
		}
		
	reflex start_channel when:!sim_start{
		do start_conversation with: [ to :: foodCourt, protocol :: 'fipa-request', performative :: 'inform', contents :: ['business is up'] ];
		do start_conversation with: [ to :: refreshmentStall, protocol :: 'fipa-request', performative :: 'inform', contents :: ['business is up'] ];
		do start_conversation with: [ to :: casinos, protocol :: 'fipa-request', performative :: 'inform', contents :: ['business is up'] ];
		sim_start<- true;
	}
	reflex ask_info when:sim_start{
		do send with: [ to :: foodCourt, protocol :: 'fipa-request', performative :: 'inform', contents :: [] ];
		do send with: [ to :: refreshmentStall, protocol :: 'fipa-request', performative :: 'inform', contents :: [] ];
		do send with: [ to :: casinos, protocol :: 'fipa-request', performative :: 'inform', contents :: [] ];
		
	}
	reflex update when:!empty(informs){
		loop i over:informs{
//			write '--------------InfoCenter---------------';
//			write 'revenue '+(i.contents at 0);
			revenue <- float(i.contents at 0);
			netProfit <- netProfit+revenue;
		}
		
	}
	reflex handle_food_shortage when: !empty(requests){
		int newMess <- int(first(requests).contents at 0);
		if(newMess != oldMess){
			list<food_truck> f <- food_truck at_distance 100;
			do send with: [ to :: f, protocol :: 'fipa-request', performative :: 'inform', contents :: [foodStall] ];
			oldMess <- newMess;
		}	
	}
	
	reflex help_guest when:!empty(helpList){
		write '------Asking for Ambulance to heal---------';
	}
	
	aspect base{
		draw cube(10) color:#skyblue;
		draw geometry: 'Infocenter' at:{location.x-5, location.y-7,location.z+11} font:font('Monotype Corsiva',24,#italic) color:#black;
	}
}
species food_court skills:[fipa]{
	float storage;
	float meal_cost;
	float revenue;
	bool sim_start;
	bool request_food;
	int req<- 1;
	reflex sell_food when:storage>0{
		request_food <-false;
		list<walker> customer <- walker at_distance(0);
        if(!empty(customer)){
        	walker i <- customer at 0;
			ask i{
				self.hunger_meter <- 1.0;
				self.bathroom_meter <- self.bathroom_meter + float(rnd(0.2));
				self.money <- self.money - myself.meal_cost;
			    do evaluate;
			}
			revenue <- meal_cost;
			storage <- storage - 1;
			remove i from:customer;			
		}
	
	}
	reflex refuse_service when: storage <= 0{
		if(!request_food){
			write 'requesting for food';
			list<information_center> info <- information_center at_distance 100;
			if(!empty(info)){
				do send with: [ to :: info, protocol :: 'fipa-request', performative :: 'request', contents :: [req] ];
				netProfit <- netProfit - 1000;
			}
			request_food <- true;	
			req <- req+1;
		}
		list<walker> customer <- walker at_distance(0);
        if(!empty(customer)){
        	walker i <- customer at 0;
			ask i{
				write 'we have run out of food, please wait!';
			    do wait_for_food;
			}
	
		}
	}
	reflex update when:!empty(informs){
//		write '-----------Food Stall----------------';
		message i <- informs at 0;
		//write 'Revenue '+i;
		do inform message:i contents:[revenue];
		revenue <- 0.0;
	}

	aspect base{
		draw pyramid(10) color:#red;
		draw geometry: 'Food Court' at:{location.x-10, location.y+7} font:font('Monotype Corsiva',24,#italic) color:#black;
		//draw square(25) texture:food;
	}
}

species refreshments skills:[fipa]
{
	float revenue <-0.0;
	float bottle_cost;
	reflex sell_drinks
	{		
		list<walker> customer <- walker at_distance(0);
		if(!empty(customer)){
			walker i <- customer at 0;
			ask i
			{
//				write 'serving customer '+i;
//				write ''+i+' is happy? = '+self.is_happy;
				thirst_meter <- 1.0;
				bathroom_meter <- bathroom_meter + float(rnd(0.2));
				self.money <- self.money - myself.bottle_cost;
				do evaluate;
			}
			remove i from:customer;
			revenue <- bottle_cost;
		}
	}
	
	reflex update when:!empty(informs){
//		write '--------Refreshments----------------';
		message i <- informs at 0;
		//write 'revenue '+i;
	    do inform message:i contents:[revenue];
	    revenue <- 0.0;
	}
	aspect base{
		draw pyramid(10) color:#seagreen;
		draw geometry: 'refreshments' at:{location.x-10, location.y-7} font:font('Monotype Corsiva',24,#italic) color:#black;
	}
}
species bathroom{
	list<walker> queue <- [];
	reflex bathroom_visit{
		list<walker> customer <- walker at_distance(0);
		if(!empty(customer)){
			walker i <- customer at 0;
			add i to:queue;
		}
		
	}
	
	reflex serve when:!empty(queue){
		walker i <- queue at 0;
		ask i{
				bathroom_meter <- 0.0;
				do evaluate;			
		}
		remove i from:queue;
	}
	aspect base{
		draw cone3D(5,10) color:#blue;
		draw geometry: 'washroom' at:{location.x-8, location.y+8} font:font('Monotype Corsiva',24,#italic) color:#black;
	}
}


species concert_hall{
	aspect base{
		draw cylinder(0.2,5) at:{location.x-5,location.y-5} color:#black;
		draw cylinder(0.2,5) at:{location.x-5,location.y+5} color:#black;
		draw cylinder(0.2,5) at:{location.x+5,location.y-5} color:#black;
		draw cylinder(0.2,5) at:{location.x+5,location.y+5} color:#black;
		draw square(10) at:{location.x,location.y,location.z+5} color:#coral;
		

	}
}


species food_truck skills:[moving, fipa]{
	bool deliverFood;
	point target;
	float quantity;
	reflex deliverFood when:!empty(informs) and target=nil and !deliverFood{
		write 'Delivering food to the restaurant';
		message i <- informs at 0;
		target <- (i.contents at 0);
		deliverFood <- true;
		informs<-[];
	}
	reflex drive when:target!=nil{
		do goto target:target on:roads;
		if(location = target){
			target <- nil;
		}
		
		
	}
	reflex deliver when:deliverFood and target=nil{
		write 'Delivery underway';
		list<food_court> foodCourts <- food_court at_distance 1;
		if(!empty(food_court)){
			food_court f <- foodCourts at 0;
			ask f{
				self.storage <- myself.quantity;
			}
			deliverFood <- false;
			target <- food_truck_base;
		}
	}
	aspect base{
		draw cylinder(1,2) at:{location.x, location.y+2,location.z+1} color:#maroon;
		draw cylinder(1,2) at:{location.x, location.y-2,location.z+1} color:#maroon;
		draw cylinder(1,2) at:{location.x-2, location.y,location.z+1} color:#maroon;
		draw cylinder(1,2) at:{location.x+2, location.y,location.z+1} color:#maroon;
		draw cube(4) color:#green;
		
	}
	
}
species casino skills:[fipa]{
	float revenue <- 0.0;
	float minOperating <- 100.0;
	float balance <- 200.0;
	int nslots <-0;
	int payout <- 10;
	reflex slots when:balance>minOperating{
		list<walker> guests <- walker at_distance 0;
		loop i over:guests{
			if(flip(0.001)){
				if(flip(0.0001)){
					if(flip(0.00005)){
						nslots<-3;
					}else{
						nslots<-2;
					}	
				}else{
					nslots<-1;
				}
			}
			ask i{
				if(myself.nslots>0){
					self.money <- self.money + myself.nslots*myself.payout;
					myself.balance <- myself.balance - myself.nslots*myself.payout;
					}else{
						self.money <- self.money - myself.payout;
						myself.revenue <- myself.revenue +myself.payout;
						myself.balance <- myself.balance+myself.payout;
					}

			}
		nslots<-0;
		}
		 
	}
	reflex refuse_service when:balance<=minOperating{
		list<walker> guests <- walker at_distance 10;
		if(!empty(guests)){
			walker i <- guests at 0;
			ask i{
				if(self.money>10){
					do enjoy;
				}else{
					do return_home;
				}
			}
		}
	}
	reflex update when:!empty(informs){
//		write '--------Refreshments----------------';
		message i <- informs at 0;
		//write 'revenue '+i;
	    do inform message:i contents:[revenue];
	    revenue <- 0.0;
	}	
	aspect base{
		//draw polyhedron([{location.x-10,location.y-10},{location.x+5,location.y+5},{location.x+10,location.y+10},{location.x+5,location.y+5}],1) color:#orange;
		draw pyramid(5) at:{location.x+6, location.y+10} color:#gold;
		draw pyramid(5) at:{location.x-6, location.y-10} color:#gold;
		draw pyramid(5) at:{location.x+6, location.y-10} color:#gold;
		draw pyramid(5) at:{location.x-6, location.y+10} color:#gold;
		draw square(12) color:#maroon;
		draw square(12) at:{location.x,location.y-6} color:#maroon;
		draw square(12) at:{location.x,location.y+6} color:#maroon;
		draw square(12) at:{location.x+2,location.y} color:#maroon;
		draw square(12) at:{location.x-2,location.y} color:#maroon;
		draw geometry: 'Casino' color:#black font:font("Monotype Corsiva",20,#italic) at:{location.x-5,location.y};
	}
}

species disco{
	
	aspect base{
		draw square(5) at:{location.x-2.5,location.y-2.5} color:rgb(rnd(128),rnd(255),rnd(255));
		draw square(5) at:{location.x-2.5,location.y+2.5} color:rgb(rnd(128),rnd(255),rnd(255));
		draw square(5) at:{location.x+2.5,location.y+2.5} color:rgb(rnd(128),rnd(255),rnd(255));
		draw square(5) at:{location.x+2.5,location.y-2.5} color:rgb(rnd(128),rnd(255),rnd(255));
		draw geometry: 'Disco' at:{location.x-5, location.y-7} font:font('Monotype Corsiva',24,#italic) color:#black;
	}
}

species bar skills:[fipa]{
	
	float revenue <- 0.0;
	float drinkPrice <- 10.0;
	
	reflex serve{
		list<walker> guests<- walker at_distance(5);
		loop i over:guests{
			ask i{
				if((get_intensity(gluttony)>gluttony_th and money > myself.drinkPrice) or drunk>100){
					drunk <- drunk+rnd(10);
					myself.revenue <- myself.revenue + myself.drinkPrice;
					do feel_better;
				}
			}
		}
	}
	
	reflex update when:!empty(informs){
//		write '--------Bar----------------';
		message i <- informs at 0;
	    do inform message:i contents:[revenue];
	    revenue <- 0.0;
	}
	aspect base{
		loop i from:-5 to:5{
			draw cube(4) at:{location.x+i*4,location.y} color:#dodgerblue;
			draw square(4) at:{location.x+i*4,location.y-4} color:#dimgrey;
			draw circle(1) at:{location.x+i*4,location.y-4} color:#gold;
 			draw geometry: 'bar' at:{location.x-5, location.y+7} font:font('Monotype Corsiva',24,#italic) color:#black;
		}
	}
}

species walker skills:[moving] control: simple_bdi{
	int gamblePrio;
	rgb color <- #cornsilk;
	rgb body_color <- #aqua;
	point target<-nil;
	string gambler<-"gamble";
	string find_love<-"find_love";
	point casinoLoc;
	bool gohome <- false;
	point home;
	//Attributes
	bool is_happy;
	float money;
	bool broken_heart;
	bool need_love <- flip(0.4);
	walker partner <-nil;
	int drunk <- 0;
		
	//Variables that handle urges
	float hunger_meter;
	float thirst_meter;
	float bathroom_meter;
	
	//known locations
	point knownFoodStall;
	point knownRefreshment;
	point knownWashroom;
	
	//enabling emotions and personality
    bool use_social_architecture <- true;
	bool use_emotions_architecture <- true;
	bool use_personality <- true;
	
	// User Emotions
	emotion greed <- new_emotion('greed',rnd(10));
	emotion love <- new_emotion('love',rnd(10));
	emotion jealousy <- new_emotion('jealousy', rnd(10));
	emotion gluttony <- new_emotion('gluttony', rnd(10));
	init{
		do add_desire(goto_concert);
	}
	reflex got_drunk when:drunk>100 and drunk !=-1{
		color <- #orange;
		body_color <- #dimgrey;
		do remove_intention(get_current_intention(),true);
		do remove_belief(new_predicate("drink"));
		do remove_intention(new_predicate("drink"),true);
		do remove_intention(enjoy_concert,true);
		if(flip(0.5)){
			write "I'm drunk, need to go home";
			do add_desire(go_home);
		}
		else{
			write "I'm drunk need help";
			do add_desire(ask_help);
		}
		drunk <- -1;
	}
	plan goto_concert intention:goto_concert{
		if(location != concert_loc){
			do goto target:concert_loc on:roads;
		}else {
			do remove_intention(goto_concert,true);
			do add_desire(enjoy_concert);
		}
	}
	
	perceive target:casino in:50 {
		float intensity <- get_intensity(myself.greed);
		if(intensity>greed_th){
			focus gamble var:location;
			myself.gamblePrio <- 10;
		}
		else{
			myself.gamblePrio <- 0;
		}
	}
	
	perceive target:bar in: 100{
		float intensity <- get_intensity(myself.gluttony);
		if(intensity>gluttony_th or myself.broken_heart){
		focus drink var:location;
		ask myself{
			do remove_intention(heartbreak,true);
			do remove_intention(enjoy_concert,true);
		}
		}
	}

	rule belief: new_predicate("gamble") new_desire: get_belief_with_name("gamble");
	rule belief: new_predicate("drink") new_desire:get_belief_with_name("drink");

	plan enjoy_concert intention: enjoy_concert priority: 1
	{	do evaluate();
		//write 'enjoying concert';
		if (distance_to(location, concert_loc) < 15)
		{
			do wander speed:0.5;
			do consume_energy;
			if (hunger_meter <= 0)
			{
				self.color <- # red;
				if (knownFoodStall = nil)
				{
					//write 'need food';
					do add_subintention(enjoy_concert,get_information,true);
					do current_intention_on_hold();
				} else
				{
					//write 'need food';
					do add_subintention(enjoy_concert,get_food,true);
					do current_intention_on_hold();
				}

			} else if (thirst_meter <= 0)
			{
				color <- # seagreen;
				if (knownRefreshment = nil)
				{
					//write 'need water';
					do add_subintention(enjoy_concert,get_information,true);
					do current_intention_on_hold();
				} else
				{
					//write 'need water';
					do add_subintention(enjoy_concert,thirst,true);
					do current_intention_on_hold();
				}

			} else if (bathroom_meter >= 1)
			{
				color <- # blue;
				if (knownWashroom = nil)
				{
					//write 'need to pee';
					do add_subintention(enjoy_concert,get_information,true);
					do current_intention_on_hold();
				} else
				{
					//write 'need to pee';
					do add_subintention(enjoy_concert,need_washroom,true);
					do current_intention_on_hold();
				}

			}
			
			// Routine to find love if interested
			float intensity <- get_intensity(love);
			if(intensity>love_th and partner=nil){
//				write 'agent  '+self+ ' in love :'+in_love;
				list<walker> interests <- walker at_distance 1; 
				if(!empty(interests)){
					walker i <- interests at 0;
						ask i{
							//write ''+myself+' asking '+i;
							if(need_love and self.partner=nil){
							//	write 'accepted '+i;
								rgb col <- rgb(rnd(255),rnd(255),rnd(255));
								self.color<-col;
								myself.color <- col;
								self.partner <- myself;
								myself.partner <-self;
								write ''+self +'in love with '+self.partner;
								do current_intention_on_hold();
								do add_subintention(enjoy_concert, enjoy_concert_together,true);
							}
							
						}
						if(partner!=nil){
							do current_intention_on_hold();
							do add_subintention(enjoy_concert, enjoy_concert_together,true);
						}	
					}				
			}

		} else
		{
			do goto target: concert_loc on:roads;
		}

	}
	
	plan get_information intention:get_information priority:5{
		do goto target:infocenter_loc on:roads;
		if (location = infocenter_loc){
			do remove_intention(get_information,true);
		}
	}
	
	plan get_food intention:get_food priority:2{
		do goto target:knownFoodStall on:roads;
		if(location = knownFoodStall){
			do remove_intention(get_food,true);
		}
	}
	plan get_refreshment intention:thirst priority:3{
		do goto target:knownRefreshment on:roads;
		if(location = knownRefreshment){
			do remove_intention(thirst,true);
		}
	}
	plan goto_washroom intention:need_washroom priority:3{
		do goto target:knownWashroom on:roads;
		if(location = knownWashroom){
			do remove_intention(need_washroom,true);
		}
	}
	plan gamble_money intention:new_predicate("gamble") priority:gamblePrio{
		casinoLoc <- point(get_current_intention ().values["location_value"] );
		float intensity <- get_intensity(greed);
		//write intensity;
		if(intensity > greed_th){
			do remove_intention(enjoy_concert,true);
			do goto target:point(casinoLoc) on:roads;
			if(distance_to(location,casinoLoc)<1) {

				if(money<100){
					do remove_belief(get_current_intention());
					do remove_intention(get_current_intention(),true);
					do add_desire(go_home);
				}
			}
//			write 'my money '+money;
			}else{
				do remove_intention(get_current_intention(),true);
				do add_desire(enjoy_concert);
			}
	}
	plan get_drunk intention:new_predicate("drink") priority:14 {
		
		float intensity <- get_intensity(gluttony);
		if((intensity>gluttony_th or broken_heart) and money > 100 and drunk <100 and drunk != -1){
		point barLoc <- point(get_current_intention().values["location_value"]);
		if(!(((location.x-barLoc.x) < 4 or (location.x-barLoc.x) > -4) and (location.y = (barLoc.y-4)))){
			do goto target:{barLoc.x,barLoc.y-4} on:roads;		
		}else{
			do remove_intention(get_current_intention(),true);
			do remove_intention(enjoy_concert,true);
		}

	}
	}
	plan hangout intention:enjoy_concert_together priority: 10{
		if(partner!=nil){
		if(distance_to(location, lovers_point)>4){
			do goto target:lovers_point;
		}else{
			do wander speed:0.2;
			float jealousyIntensity <- get_intensity(jealousy);
			if(jealousyIntensity > jealousy_th){
				color <- #crimson;
				body_color <- #black;
				ask partner {
					write ''+self+': '+myself+' broke my heart';
					self.partner <- nil;
					color <- #darkblue;
					do find_a_drink;
				}
				do remove_intention(get_current_intention(),true);
				do remove_intention(enjoy_concert,true);
				do add_desire(go_home);
			}		
			}
		//write ''+self+'partner is '+partner;
		}else{
			do remove_intention(enjoy_concert_together,true);
			//do add_subintention(enjoy_concert, heartbreak, true);
		}
		
		//write ''+self+' I am in lov			
	}
	
	plan roamaroundsadly intention:heartbreak {
		color <- #darkblue;
		body_color <- #black;
		do wander;
	}
	
	plan go_home intention:go_home priority:10{
		do goto target:home on: roads;
		if(location = home){
			write ''+self+'I am going home';
			do die;
		}
	}
	
	plan need_help intention:ask_help priority:15{
		if(distance_to(location,infocenter_loc)<5){
			ask information_center{
				add myself to:helpList;
			}
		do remove_intention(get_current_intention(),true);
		do add_desire(pass_out);
		}else{
			do goto target:infocenter_loc on:roads;
			do wander;
		}
	}
	
	plan faint intention:pass_out priority:20{
		write 'OMG PLEASE SOMEONE HELP!!!!';
	}
	
	action find_a_drink{
		broken_heart <- true;
		do remove_intention(enjoy_concert_together,true);
		do add_subintention(enjoy_concert, heartbreak, true);
	}
	action consume_energy{
		hunger_meter <- hunger_meter - (0.001 + rnd(0.0001));
		thirst_meter <- thirst_meter - (0.001 + rnd(0.0001));
		bathroom_meter <- bathroom_meter + rnd(0.001);		
	}
	action evaluate{
		if(hunger_meter>0 and thirst_meter>0 and bathroom_meter<1){
			is_happy<-true;
			target<-{50,50};
			color <- #cornsilk;
		}
	}
	
	action wait_for_food{
		write 'I am waiting for food';
		target <- {knownFoodStall.x+10,knownFoodStall.y};
	}
	
	action return_home{
		do remove_intention(enjoy_concert,true);
		do add_desire(go_home);
	}
	action enjoy{
		do add_desire(enjoy_concert);
	}

	aspect base{
		draw cube(2) color:body_color;
		draw sphere(1)  at: {location.x, location.y, location.z+2} color:color;
//		draw geometry:string(self) at:{location.x,location.y,location.z+3} font:font('Helvetica',10,#bold) color:#black;
	}
}


experiment exp type:gui{
	parameter "Number of guests" var:nb_guest category:"People" min:1 max:100;
	parameter "Greed Threshold" var:greed_th category:"People" min:0 max:10;
	parameter "Love Threshold" var:love_th category:"People" min:0 max:10;
	parameter "Jealousy Threshold" var:jealousy_th category:"People" min:0 max:10;
	parameter "Drinking Threshold" var:gluttony_th category:"People" min:0 max:10;
    output  {
    	display charter{
    		chart "chart "{
    			data "revenue" value:netProfit;
    		}
    	}
        display MyDisplay type: opengl {
			graphics "meh"{
				draw square(100) texture:background_file;
				loop edges over:roads.edges{
					draw edges width: 10 texture:roadTexture;
				}
			
			}
			species information_center aspect:base;
			species food_court aspect:base;
			species refreshments aspect:base;
			species bathroom aspect:base;
			species walker aspect:base;
			species concert_hall aspect:base;
			species food_truck aspect:base;
			species casino aspect:base;
			species disco aspect:base;
			species bar aspect:base;
        }
    }
}