/**
* Name: test
* Author: pmath
* Description: 
* Tags: Tag1, Tag2, TagN
*/

model test

/* Insert your model definition here */

global{
	geometry shape <- square(100);
	graph<geometry,geometry> roads <- spatial_graph([]);
	list<point> nodes <- [];
	list<point> home_nodes <- [{0,20},{0,80},{20,0},{80,0},{100,20},{100,80},{20,100},{80,100}];
	list<point> stage_location <- [{36,36},{64,36},{36,64},{64,64}];
	file background_file <- file("../includes/background.jpg");
	file roadTexture <- file("../includes/roadTexture.jpg");
	point infocenter_loc <- {10,10};
	point foodStall_loc <- {10,90};
	point refreshment_loc <- {90,10};
	point washroom_loc <- {90,90};
	float netCost;
	float netProfit;
	init{
		
		// Entry points

		loop p over:home_nodes{
			add p to:nodes;
		}
		
		// Extermities
		add point(20,20) to:nodes; //8
		add point(80,20) to:nodes; //9
		add point(20,80) to:nodes; //10
		add point(80,80) to:nodes; //11
		
		//concert hall
		add point(30,30) to:nodes; //12
		add point(30,70) to:nodes; //13
		add point(70,30) to:nodes; //14
		add point(70,70) to:nodes; //15
		
		int k <- length(nodes);


		loop node over:nodes{
			roads<- roads add_node(node);
		}
		
		roads <- roads add_edge(nodes at 0 :: nodes at 8);
		roads <- roads add_edge(nodes at 1 :: nodes at 10);		
        roads <- roads add_edge(nodes at 2 :: nodes at 8);
    	roads <- roads add_edge(nodes at 6 :: nodes at 10);
    	roads <- roads add_edge(nodes at 3 :: nodes at 9);
    	roads <- roads add_edge(nodes at 4 :: nodes at 9);
    	roads <- roads add_edge(nodes at 5 :: nodes at 11);
    	roads <- roads add_edge(nodes at 7 :: nodes at 11);
    	
    	roads <- roads add_edge(nodes at 8 :: nodes at 10);
    	roads <- roads add_edge(nodes at 8 :: nodes at 9);
    	roads <- roads add_edge(nodes at 10 :: nodes at 11);
    	roads <- roads add_edge(nodes at 9 :: nodes at 11);
    	
    	roads <- roads add_edge(nodes at 12 :: nodes at 13);
    	roads <- roads add_edge(nodes at 13 :: nodes at 15);
    	roads <- roads add_edge(nodes at 12 :: nodes at 14);
    	roads <- roads add_edge(nodes at 14 :: nodes at 15);
    	
    	roads <- roads add_edge(nodes at 8 :: nodes at 12);
    	roads <- roads add_edge(nodes at 9 :: nodes at 14);
    	roads <- roads add_edge(nodes at 10 :: nodes at 13);
    	roads <- roads add_edge(nodes at 11 :: nodes at 15);
    	
   		roads <- roads with_weights (roads.edges as_map (each::30));
 
   			
   			   		
		create information_center{
			location <- infocenter_loc;
			foodStall <- foodStall_loc;
			washroom <- washroom_loc;
			refreshment <- refreshment_loc;
			revenue<-0.0;
			cost<-0.0;
		}
		create food_court{
			revenue <- 0.0;
			meal_cost <- 5.0;
			storage <- 60.0;
			location <- foodStall_loc;
		}
		create bathroom{
			location <- washroom_loc;
		}
		create refreshments{
			location <- refreshment_loc;
		}
		//create road from:nodes;
		create walker number:50{
			location <- home_nodes at rnd(length(home_nodes)-1);
			target<-{50,50};
			is_happy <- true;
			hunger_meter   <- 0.1 + float(rnd(1));
			thirst_meter   <- 0.1 + float(rnd(1));
			bathroom_meter <- 0.1 + float(rnd(0.5));
			money<-1000+rnd(1000.0);
		
		}
		int i <- 0;
		create concert_hall number:4{
			location <- stage_location at i;
			i <- i + 1;
		}
   		}
	
}

species information_center skills:[fipa]{
	point foodStall;
	point refreshment;
	point washroom;
	float revenue;
	float cost;
	bool sim_start <-true;
	reflex attend_to_guest{
		list<walker> guests <- walker at_distance 0;
		if(!empty(guests)){
			walker i <- guests at 0;
			ask i{
				write '---------------------------------------------------------------------------';
				write 'Serving guest '+i;
				self.knownFoodStall <- myself.foodStall;
				self.knownRefreshment <- myself.refreshment;
				self.knownWashroom <- myself.washroom; 
				if(i.hunger_meter<=0){
					write 'for food please go to '+myself.foodStall;
					i.target<-myself.foodStall;
				}else if(i.thirst_meter <=0){
					write 'for refreshments please go to '+myself.refreshment;
					i.target <-myself.refreshment;
				}else if(i.bathroom_meter >=1){
					i.target <-myself.washroom;
					write 'for the washroom,please go to '+myself.washroom;
				}
			write '---------------------------------------------------------------------------';
			}
		}
		}
		
	reflex start_channel when:sim_start{
		list<food_court> foodCourt <- food_court at_distance 100;
		list<refreshments> refreshmentStall <- refreshments at_distance 100;
		do start_conversation with: [ to :: foodCourt, protocol :: 'fipa-contract-net', performative :: 'cfp', contents :: [] ];
		do start_conversation with: [ to :: refreshmentStall, protocol :: 'fipa-contract-net', performative :: 'cfp', contents :: [] ];
	}
	
	aspect base{
		draw cube(10) color:#skyblue;
	}
}
species food_court{
	float storage;
	float meal_cost;
	float revenue;
	reflex sell_food when:storage>0{
		list<walker> customer <- walker at_distance(0);
        if(!empty(customer)){
        	walker i <- customer at 0;
			ask i{
				self.hunger_meter <- 1.0;
				self.bathroom_meter <- self.bathroom_meter + float(rnd(0.2));
				self.money <- self.money - myself.meal_cost;
			    do evaluate;
			}
			revenue <- revenue+meal_cost;
			storage <- storage - 1;
			remove i from:customer;			
		}
	
	}
	reflex refuse_service when: storage <= 0{
		list<walker> customer <- walker at_distance(0);
        if(!empty(customer)){
        	walker i <- customer at 0;
			ask i{
				write 'we have run out of food, please wait!';
			    do wait_for_food;
			}
	
		}
	}
	aspect base{
		draw pyramid(10) color:#red;
		//draw square(25) texture:food;
	}
}

species refreshments 
{
	reflex sell_drinks
	{		
		list<walker> customer <- walker at_distance(0);
		if(!empty(customer)){
			walker i <- customer at 0;
			ask i
			{
//				write 'serving customer '+i;
//				write ''+i+' is happy? = '+self.is_happy;
				thirst_meter <- 1.0;
				bathroom_meter <- bathroom_meter + float(rnd(0.2));
				do evaluate;
			}
			remove i from:customer;
		
		}
	}
	aspect base{
		draw pyramid(10) color:#yellow;
	}
}
species bathroom{
	list<walker> queue <- [];
	reflex bathroom_visit{
		list<walker> customer <- walker at_distance(0);
		if(!empty(customer)){
			walker i <- customer at 0;
			add i to:queue;
		}
		
	}
	
	reflex serve when:!empty(queue){
		walker i <- queue at 0;
		ask i{
				bathroom_meter <- 0.0;
				do evaluate;			
		}
		remove i from:queue;
	}
	aspect base{
		draw cone3D(5,10) color:#blue;
	}
}

species concert_hall{
	aspect base{
		draw cylinder(0.2,5) at:{location.x-5,location.y-5} color:#black;
		draw cylinder(0.2,5) at:{location.x-5,location.y+5} color:#black;
		draw cylinder(0.2,5) at:{location.x+5,location.y-5} color:#black;
		draw cylinder(0.2,5) at:{location.x+5,location.y+5} color:#black;
		draw square(10) at:{location.x,location.y,location.z+5} color:#coral;

	}
}


species casino{
	
	reflex slots{
		
	}
	
	aspect base{
		draw pyramid(1) at:{location.x,location.y,location.z+5} color:#orange;
	}
}
species walker skills:[moving]{
	rgb color <- #cornsilk;
	point target<-nil;
	bool gohome <- false;
	//Attributes
	bool is_happy;
	float money;
	//Variables that handle urges
	float hunger_meter;
	float thirst_meter;
	float bathroom_meter;
	
	//known locations
	point knownFoodStall;
	point knownRefreshment;
	point knownWashroom;
	
	//
	bool target_reached <- false;

	reflex walk when:target!=nil{
		speed <- 1.0;
		do goto target:target on:roads;
		if(location = target){
			target <- nil;
			target_reached<-true;
			
		}
	
	}
	
		//when we need to change location
	reflex go_to_new_location when: (hunger_meter <= 0 or thirst_meter <= 0 or bathroom_meter>=1) and target=nil {	
		
		if(hunger_meter <= 0){
			self.color <- #red;
			if(knownFoodStall = nil){
				target<- infocenter_loc;
			}else{
				target<- knownFoodStall;
				target_reached <- false;
			}
			
		}
		else if(thirst_meter <= 0){
			color <- #yellow;
			if(knownRefreshment = nil){
				target<- infocenter_loc;
			}else{
				target<-knownRefreshment;
				target_reached <- false;
			}
		}
		else if(bathroom_meter>=1){
			color <- #blue;
			if(knownWashroom = nil){
				target<- infocenter_loc;
			}else{
				target<- knownWashroom;
				target_reached <- false;
			}
		}
		if(is_happy){
			target <- {50,50};
			color <- #cornsilk;
			
		}
		target_reached <- false;
		
	}
	reflex reduce_stats{
		hunger_meter <- hunger_meter - (0.001 + float(rnd(0.0001)));
		thirst_meter <- thirst_meter - (0.001 + float(rnd(0.0001)));
		bathroom_meter <- bathroom_meter + float(rnd(0.001));
		//write 'hunger_meter : '+hunger_meter;
		//write 'thirst_meter : '+thirst_meter;
		//write'bathroom_meter: '+bathroom_meter;
		//write'-------------------------------';
		if(hunger_meter<=0 or thirst_meter<=0 or bathroom_meter>=1){
			is_happy<-false;
		}
		else{
			is_happy<-true;
		}

	}
	reflex wander when:target=nil{
		target_reached <- true;
		speed <- 0.5;
		do wander bounds:square(10);
	}
	
	
			
	reflex go_home when:gohome {
		do goto target:target on:roads;
	}
	
	action evaluate{
		if(hunger_meter>0 and thirst_meter>0 and bathroom_meter<1){
			is_happy<-true;
			target<-{50,50};
			color <- #cornsilk;
		}
	}
	
	action wait_for_food{
		write 'I am waiting for food';
		target <- {knownFoodStall.x+10,knownFoodStall.y};
	}
	aspect base{
		draw cube(2) color:#aqua;
		draw sphere(1)  at: {location.x, location.y, location.z+2} color:color;
	}
}


experiment exp{
	
    output {
        display MyDisplay type: opengl {
			graphics "meh"{
				draw square(100) texture:background_file;
				loop edges over:roads.edges{
					draw edges width: 10 texture:roadTexture;
				}
			
			}
			species information_center aspect:base;
			species food_court aspect:base;
			species refreshments aspect:base;
			species bathroom aspect:base;
			species walker aspect:base;
			species concert_hall aspect:base;
        }
    }
}
